import { ReactNode, useEffect, useState } from 'react';
import { api } from '@/shared/api/http';
import { LoadingScreen } from '@/shared/ui/LoadingScreen';
import { ErrorScreen } from '@/shared/ui/ErrorScreen';
import { safeWebApp } from '@/app/utils/safeTelegram';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export type InitState = 'loading' | 'error' | 'success';

interface AppInitializerProps {
  children: ReactNode;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export function AppInitializer({ children }: AppInitializerProps) {
  const [initState, setInitState] = useState<InitState>('loading');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const initialize = async () => {
      try {
        console.log('üöÄ Initializing application...');
        
        // TelegramGameProxy —Å–∫—Ä–∏–ø—Ç —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ index.html
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API, –ø–æ–ª—É—á–∞—è –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try {
          console.log('üì° Checking API connection...');
          const healthResponse = await fetch(`${import.meta.env.VITE_API_URL}/health`);
          if (healthResponse.ok) {
            console.log('‚úÖ API connection successful');
          } else {
            console.warn('‚ö†Ô∏è API health check failed, but continuing');
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è API health check failed (fetch error), but continuing', e);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp...');
        const isDevMode = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º WebApp
        const webApp = safeWebApp();
        
        if (!webApp && !isDevMode) {
          throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –≤–Ω—É—Ç—Ä–∏ Telegram');
        }
        
        if (webApp) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          if (!webApp.initData && !isDevMode) {
            console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram');  
          }

          try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º ready() –∏ expand()
            if (typeof webApp.ready === 'function') {
              webApp.ready();
            }
            
            if (typeof webApp.expand === 'function') {
              webApp.expand();
            }
            
            console.log('üì± Telegram WebApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
              initDataLength: webApp.initData ? webApp.initData.length : 0,
              platform: webApp.platform || 'unknown',
              version: webApp.version || 'unknown',
              user: webApp.initDataUnsafe?.user ? 
                `${webApp.initDataUnsafe.user.first_name} (ID: ${webApp.initDataUnsafe.user.id})` : 
                'not available'
            });
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:', error);
            if (!isDevMode) {
              throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
            }
          }
        } else if (isDevMode) {
          console.log('üõ†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram WebApp');
        }
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        try {
          console.log('üë§ Preloading user profile...');
          const profile = await api.getProfile();
          console.log('‚úÖ Profile loaded successfully:', profile);
        } catch (error) {
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
          if (isDevMode) {
            console.warn('‚ö†Ô∏è Profile loading failed in dev mode, continuing with mock data');
          } else {
            console.error('‚ùå Profile loading failed:', error);
            // –í production –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º - RouteGuard –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        console.log('üéâ Application initialized successfully');
        setInitState('success');
      } catch (error) {
        console.error('‚ùå Initialization failed:', error);
        setInitState('error');
        setErrorMessage(error instanceof Error ? error.message : 'Unknown initialization error');
      }
    };

    initialize();
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
  if (initState === 'error') {
    return (
      <ErrorScreen 
        title="–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
        message={errorMessage || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'}
        description="–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram –∏–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º."
        buttonText="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
        onRetry={() => window.location.reload()}
        secondaryButtonText="–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram"
        onSecondaryAction={() => window.location.href = 'https://t.me/taxip2p_bot'}
      />
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  if (initState === 'loading') {
    return <LoadingScreen />;
  }

  // –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  return <>{children}</>;
}
