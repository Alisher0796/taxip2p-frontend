import { ReactNode, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTelegram } from '../TelegramProvider/hooks';
import { api } from '@/shared/api/http';
import { LoadingScreen } from '@/shared/ui';
import type { Role } from '@/shared/types/common';

interface RouteGuardProps {
  children: ReactNode;
  requiredRole?: Role;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è RouteGuard, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–±–µ–≥–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ 
 * –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
export function RouteGuard({ children, requiredRole }: RouteGuardProps) {
  const { isReady, haptic } = useTelegram();
  const navigate = useNavigate();
  const [isChecking, setIsChecking] = useState(true);
  const [retryCount, setRetryCount] = useState(0);
  const [hasNavigated, setHasNavigated] = useState(false);

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
  const isDevMode = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';
  const MAX_RETRIES = isDevMode ? 1 : 2; // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ª–∞–µ–º –º–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫

  useEffect(() => {
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let isMounted = true;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Telegram WebApp –≥–æ—Ç–æ–≤ –∏–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if ((!isReady && !isDevMode) || hasNavigated) return;
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤
    const checkAccess = async () => {
      console.log(`üîê Checking access, retry ${retryCount}/${MAX_RETRIES}`);

      try {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
        if (isDevMode && retryCount >= MAX_RETRIES) {
          console.warn('‚ö†Ô∏è Dev mode: max retries reached, using mock profile');
          if (!isMounted) return;
          setIsChecking(false);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profile = await api.getProfile();
        console.log('üë§ Profile loaded:', profile);
        
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if (profile && requiredRole && profile.role !== requiredRole) {
          console.warn(`‚ö†Ô∏è Role mismatch: Required ${requiredRole}, but user has ${profile.role}`);
          if (isMounted) {
            haptic?.notification('error');
            setHasNavigated(true);
            navigate('/', { replace: true });
          }
          return;
        }
  
        // –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–∏–ª–∏ —Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if (isMounted) {
          setIsChecking(false);
        }
      } catch (error) {
        console.error('‚ùå Access check error:', error);
        
        // –†–µ—à–µ–Ω–∏–µ –¥–ª—è 404 –æ—à–∏–±–æ–∫ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (error instanceof Error && 
            (error.message.includes('404') || 
            error.message.includes('Profile not found'))) {
          
          // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–ª—É—á–∞–µ 404
          try {
            if (retryCount < MAX_RETRIES) {
              console.log('üîÑ Trying to create profile...');
              await api.updateProfile({ role: requiredRole || 'passenger' });
              if (isMounted) {
                setRetryCount(prev => prev + 1);
              }
              return;
            } else {
              // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
              console.warn('‚ö†Ô∏è Too many retries, redirecting to role selection');
              if (isMounted) {
                haptic?.notification('error');
                setHasNavigated(true);
                navigate('/', { replace: true });
              }
              return;
            }
          } catch (createError) {
            console.error('‚ùå Profile creation failed:', createError);
            if (isMounted) {
              // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
              if (isDevMode) {
                console.warn('‚ö†Ô∏è Dev mode: allowing access despite errors');
                setIsChecking(false);
                return;
              }

              setHasNavigated(true);
              navigate('/', { replace: true });
            }
            return;
          }
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        if (isMounted) {
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          if (isDevMode) {
            console.warn('‚ö†Ô∏è Dev mode: allowing access despite errors');
            setIsChecking(false);
          } else if (retryCount < MAX_RETRIES) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            setRetryCount(prev => prev + 1);
          } else {
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            haptic?.notification('error');
            setHasNavigated(true);
            navigate('/', { replace: true });
          }
        }
      }
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
    checkAccess();
    
    // –û—á–∏—Å—Ç–∫–∞
    return () => {
      isMounted = false;
    };
  }, [isReady, requiredRole, navigate, haptic, retryCount, isDevMode, hasNavigated]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–∞
  if (isChecking && !isDevMode) {
    return <LoadingScreen />;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  return <>{children}</>;
}
