import { ReactNode, useCallback, useEffect, useState } from 'react';
import type { TelegramWebApp, WebAppUser, HapticFeedback } from '@/shared/types/telegram';
import { TelegramContext } from './context';
import { LoadingScreen } from '@/shared/ui/LoadingScreen';
import { safeWebApp, safeTelegramCall, safeReady, safeExpand } from '../../utils/safeTelegram';

interface TelegramProviderProps {
  children: ReactNode;
}

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏
const MAX_INIT_ATTEMPTS = 3; 
const INIT_RETRY_DELAY = 800;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const IS_DEV_MODE = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';

type HapticStyle = Parameters<HapticFeedback['impactOccurred']>[0];
type NotificationType = Parameters<HapticFeedback['notificationOccurred']>[0];

export function TelegramProvider({ children }: TelegramProviderProps) {
  const [isInitialized, setIsInitialized] = useState(false);
  const [initError, setInitError] = useState<Error | null>(null);
  const [initAttempts, setInitAttempts] = useState(0);
  const [user, setUser] = useState<WebAppUser | null>(null);
  const [webApp, setWebApp] = useState<TelegramWebApp | null>(null);

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp –≤ –±–æ–ª–µ–µ –ª–æ—è–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
   */
  const checkWebApp = useCallback(() => {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ WebApp –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (IS_DEV_MODE) {
      console.log('üí° Dev mode: simulating Telegram WebApp');
      return true;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ WebApp
    const app = safeWebApp();
    if (!app) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –í –º–æ–±–∏–ª—å–Ω–æ–º Telegram –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å initData –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    // –ü–æ—ç—Ç–æ–º—É –º—ã –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ WebApp
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
      if (typeof app.ready === 'function' && typeof app.expand === 'function') {
        return true;
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ WebApp:', e);
    }

    return false;
  }, []);

  useEffect(() => {
    const initializeWebApp = async () => {
      try {
        console.log(`üïê –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp ${initAttempts + 1}/${MAX_INIT_ATTEMPTS}`);
        
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç
        if (IS_DEV_MODE) {
          console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ WebApp –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
          
          // –°–æ–∑–¥–∞—ë–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          const mockUser = {
            id: 12345678,
            first_name: 'Dev',
            last_name: 'User',
            username: 'devuser',
            language_code: 'ru'
          } as WebAppUser;
          
          setUser(mockUser);
          setWebApp({} as TelegramWebApp);
          setIsInitialized(true);
          return;
        }
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebApp
        if (checkWebApp()) {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º WebApp
          const app = safeWebApp();
          if (!app) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram WebApp');
          }

          // –í Telegram –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É
          let webAppUser = safeTelegramCall(() => app.initDataUnsafe?.user, null);
          
          // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log('üí¨ WebApp —Ñ–∞–∫—Ç—ã:', {
            version: safeTelegramCall(() => app.version, 'unknown'),
            platform: safeTelegramCall(() => app.platform, 'unknown'),
            viewportHeight: safeTelegramCall(() => app.viewportHeight, 0),
            colorScheme: safeTelegramCall(() => app.colorScheme, 'unknown'),
            headerColor: safeTelegramCall(() => app.headerColor, 'unknown')
          });

          // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          // –ó–∞—á–∞—Å—Ç—É—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ
          if (webAppUser) {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', webAppUser);
            setUser(webAppUser);
          } else {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç WebApp –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          setWebApp(app);
          
          // –í—ã–∑—ã–≤–∞–µ–º ready –∏ expand –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
          safeReady();
          safeExpand();
          
          console.log('‚úÖ WebApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          setIsInitialized(true);
          return;
        }

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (initAttempts >= MAX_INIT_ATTEMPTS) {
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ WebApp
          if (IS_DEV_MODE) {
            console.log('‚úÖ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram WebApp');
            const mockUser = {
              id: 12345678,
              first_name: 'Dev',
              last_name: 'User',
              username: 'devuser',
              language_code: 'ru',
              is_premium: false
            } as WebAppUser;
            
            setUser(mockUser);
            setWebApp({} as TelegramWebApp);
            setIsInitialized(true);
            return;
          }
          
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram WebApp');
        }

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${INIT_RETRY_DELAY}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        const timeoutId = setTimeout(() => {
          setInitAttempts(prev => prev + 1);
        }, INIT_RETRY_DELAY);

        return () => clearTimeout(timeoutId);
      } catch (error) {
        console.error('‚ùå WebApp initialization error:', error);
        setInitError(error instanceof Error ? error : new Error('Unknown error'));
      }
    };

    if (!isInitialized && !initError) {
      initializeWebApp();
    }
  }, [checkWebApp, initAttempts, isInitialized, initError]);

  const hideBackButton = useCallback(() => {
    if (webApp?.BackButton) {
      webApp.BackButton.hide();
    }
  }, [webApp]);

  const showBackButton = useCallback(() => {
    if (webApp?.BackButton) {
      webApp.BackButton.show();
    }
  }, [webApp]);

  const hideMainButton = useCallback(() => {
    if (webApp?.MainButton) {
      webApp.MainButton.hide();
    }
  }, [webApp]);

  const showMainButton = useCallback(() => {
    if (webApp?.MainButton) {
      webApp.MainButton.show();
    }
  }, [webApp]);

  const haptic = webApp?.HapticFeedback ? {
    impact: (style: HapticStyle) => {
      try {
        webApp.HapticFeedback?.impactOccurred(style);
      } catch (error) {
        console.error('Haptic impact error:', error);
      }
    },
    notification: (type: NotificationType) => {
      try {
        webApp.HapticFeedback?.notificationOccurred(type);
      } catch (error) {
        console.error('Haptic notification error:', error);
      }
    },
    selection: () => {
      try {
        webApp.HapticFeedback?.selectionChanged();
      } catch (error) {
        console.error('Haptic selection error:', error);
      }
    },
  } : undefined;

  if (initError) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (IS_DEV_MODE) {
      console.warn('‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É:', initError.message);
      
      const mockUser = {
        id: 12345678,
        first_name: 'Dev',
        last_name: 'User',
        username: 'devuser',
        language_code: 'ru'
      } as WebAppUser;
      
      return (
        <TelegramContext.Provider
          value={{
            isReady: true,
            webApp: {} as TelegramWebApp,
            user: mockUser,
            hideBackButton: () => {},
            showBackButton: () => {},
            hideMainButton: () => {},
            showMainButton: () => {},
            haptic: undefined,
          }}
        >
          <div className="p-2 bg-yellow-100 text-yellow-800 text-xs fixed top-0 left-0 right-0 z-50">
            –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ—à–∏–±–∫–∞ WebApp: {initError.message})
          </div>
          {children}
        </TelegramContext.Provider>
      );
    }
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-100 p-4">
        <div className="max-w-md rounded-lg bg-white p-6 text-center shadow-lg">
          <div className="text-red-500 mb-4">
            <svg className="w-16 h-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          
          <h1 className="mb-4 text-xl font-bold text-gray-800">
            –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </h1>
          
          <p className="text-gray-600 mb-4">{initError.message}</p>
          
          <p className="text-gray-500 text-sm mb-6">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ Telegram
          </p>
          
          <div className="flex flex-col gap-3">
            <button
              onClick={() => window.location.reload()}
              className="w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            
            <button
              onClick={() => window.location.href = 'https://t.me/taxip2p_bot'}
              className="w-full rounded border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-100"
            >
              –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!isInitialized) {
    return <LoadingScreen />;
  }

  return (
    <TelegramContext.Provider
      value={{
        isReady: isInitialized,
        webApp,
        user,
        hideBackButton,
        showBackButton,
        hideMainButton,
        showMainButton,
        haptic,
      }}
    >
      {children}
    </TelegramContext.Provider>
  );
}
