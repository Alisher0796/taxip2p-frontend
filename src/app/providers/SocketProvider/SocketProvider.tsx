import { ReactNode, useEffect, useState } from 'react';
import { SocketContext } from './context';
import { createSocket } from '@/shared/lib/socket';

/** –ü—Ä–æ–ø—Å—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ–∫–µ—Ç–∞ */
interface SocketProviderProps {
  /** –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
  children: ReactNode;
}

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º –±—ç–∫–µ–Ω–¥–æ–º –Ω–∞ Railway
 */
export function SocketProvider({ children }: SocketProviderProps) {
  const [socket] = useState(() => createSocket());
  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  const isDevMode = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';
  const telegramInitData = window.Telegram?.WebApp?.initData || '';

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (isDevMode) {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É...');
      console.log('üîë Telegram initData ' + (telegramInitData ? '–∏–º–µ–µ—Ç—Å—è' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('connect', () => {
      setIsConnected(true);
      setConnectionError(null);
      if (isDevMode) console.log('üíö –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    });

    socket.on('disconnect', (reason: string) => {
      setIsConnected(false);
      if (isDevMode) console.log('üíî –°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-—Ä–µ–∂–∏–º–µ
      if (!isDevMode && reason !== 'io client disconnect') {
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        if (isDevMode) console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      }
    });

    socket.on('connect_error', (error: Error) => {
      setConnectionError(error.message);
      if (isDevMode) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É:', error.message);
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (!telegramInitData) {
          console.log('üîë –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Telegram. –í –ø—Ä–æ–¥–∞–∫—à–Ω-—Ä–µ–∂–∏–º–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.');
        }
      }
    });
    
    socket.on('error', (error: Error) => {
      if (isDevMode) console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', error.message);
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    socket.connect();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      socket.off('connect');
      socket.off('disconnect');
      socket.off('connect_error');
      socket.off('error');
      socket.disconnect();
    };
  }, [socket, isDevMode, telegramInitData]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ –¥–∞–∂–µ –±–µ–∑ —Å–æ–∫–µ—Ç–∞
  const appConnected = isDevMode ? true : isConnected;
  
  return (
    <SocketContext.Provider value={{ socket, isConnected: appConnected }}>
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
      {isDevMode && !isConnected && (
        <div className="fixed bottom-0 left-0 right-0 bg-yellow-100 text-yellow-800 text-xs p-1 text-center z-50">
          {connectionError 
            ? `–û—à–∏–±–∫–∞ WebSocket: ${connectionError}` 
            : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'}
        </div>
      )}
      {children}
    </SocketContext.Provider>
  );
}
