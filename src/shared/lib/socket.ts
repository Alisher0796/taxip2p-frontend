import io from 'socket.io-client';

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç-–∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 */
export function createSocket() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const isDevMode = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';
  
  // JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const authToken = localStorage.getItem('authToken');
  
  // –î–∞–Ω–Ω—ã–µ Telegram WebApp
  const telegramInitData = window.Telegram?.WebApp?.initData || '';
  
  if (isDevMode) {
    console.log('üì∂ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  }

  // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç —Å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const socketOptions: Record<string, any> = {
    autoConnect: false,
    withCredentials: true
  };

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (handshake)
  socketOptions.extraHeaders = {
    'X-Telegram-Init-Data': telegramInitData,
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (authToken) {
    socketOptions.extraHeaders['Authorization'] = `Bearer ${authToken}`;
  }
  
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
  if (isDevMode) {
    socketOptions.extraHeaders['X-Development-Mode'] = 'true';
  }

  // –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const socket = io(import.meta.env.VITE_API_URL, socketOptions);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (isDevMode) {
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('üíö Socket —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    });
    
    socket.on('connect_error', (error: Error) => {
      console.error('üíî Socket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      console.log('üìÉ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', socketOptions);
    });
    
    socket.on('disconnect', (reason: string) => {
      console.log('üì¥ Socket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    socket.on('error', (error: Error) => {
      console.error('‚ö†Ô∏è Socket –æ—à–∏–±–∫–∞:', error);
    });
  }

  return socket;
}
