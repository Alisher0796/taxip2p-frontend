import type { Order, OrderStatus, PriceOffer, Message, Profile } from '@/shared/types/api';
import { safeWebApp } from '@/app/utils/safeTelegram';

const BASE_URL = import.meta.env.VITE_API_URL?.replace(/\/+$/, '') || '';
const API_PREFIX = '/api';
const IS_DEV_MODE = import.meta.env.DEV || import.meta.env.VITE_DEV_MODE === 'true';

if (!BASE_URL) {
  throw new Error('VITE_API_URL is not defined');
}

console.log(`API initialized with URL: ${BASE_URL}${API_PREFIX}, Dev mode: ${IS_DEV_MODE}`);

/** –û—Ç–≤–µ—Ç –æ—Ç API */
export interface ApiResponse<T> {
  /** –î–∞–Ω–Ω—ã–µ */
  data: T;
  /** –û—à–∏–±–∫–∞ */
  error?: string;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */
  message?: string;
}

type RequestOptions = {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  body?: unknown;
  headers?: Record<string, string>;
};

/** –°–æ–∑–¥–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API */
export const createHttp = () => {
  return async <T>(endpoint: string, options: RequestOptions = {}): Promise<T> => {
    const { method = 'GET', body, headers = {} } = options;

    const requestHeaders: Record<string, string> = {
      'Content-Type': 'application/json',
      ...headers,
    };
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram WebApp
      const webApp = safeWebApp();
      
      if (!webApp) {
        if (IS_DEV_MODE) {
          console.warn('üí™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          requestHeaders['x-test-auth'] = 'development-mode';
        } else {
          throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } else {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          const initData = webApp.initData;
          
          if (initData && initData.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            requestHeaders['x-telegram-init-data'] = initData;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è URL-—ç–Ω–∫–æ–¥–∏–Ω–≥
            if (initData.includes('%') || initData.includes('+')) {
              console.warn('‚ö†Ô∏è initData –º–æ–∂–µ—Ç –±—ã—Ç—å URL-—ç–Ω–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å');
              requestHeaders['x-telegram-init-data'] = decodeURIComponent(initData);
            }

            // –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF - –¥–æ–±–∞–≤–ª—è–µ–º Origin –∏ Referer
            requestHeaders['Origin'] = window.location.origin;
            requestHeaders['Referer'] = window.location.href;
            
            // –î–æ–±–∞–≤–ª—è–µ–º Hash –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try {
              const dataHash = btoa(initData.slice(0, 20)).replace(/=/g, '');
              requestHeaders['x-telegram-hash'] = dataHash;
            } catch (e) {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö–µ—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', e);
            }
            
            // –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            console.info('üîê Telegram auth data:', { 
              initDataLength: initData.length,
              headers: Object.keys(requestHeaders),
              user: webApp.initDataUnsafe?.user ? 
                `${webApp.initDataUnsafe.user.first_name} (ID: ${webApp.initDataUnsafe.user.id})` : 
                'not available'
            });
          } else {
            console.warn('‚ö†Ô∏è Telegram initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
            
            if (IS_DEV_MODE) {
              console.warn('üí™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
              // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              requestHeaders['x-test-auth'] = 'development-mode';
              requestHeaders['x-skip-auth'] = 'true';
            } else {
              throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram initData:', error);
          
          if (IS_DEV_MODE) {
            console.warn('üí™ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
            requestHeaders['x-test-auth'] = 'development-mode';
            requestHeaders['x-skip-auth'] = 'true';
          } else {
            throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
          }
        }
      }

      const fullUrl = `${BASE_URL}${API_PREFIX}${endpoint}`;
      console.debug('Request to API:', { method, fullUrl, body, headers: requestHeaders });

      const response = await fetch(fullUrl, {
        method,
        headers: requestHeaders,
        body: body ? JSON.stringify(body) : undefined,
      });

      let data: ApiResponse<T>;
      
      try {
        data = await response.json();
      } catch (error) {
        console.error('Failed to parse API response:', error);
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      if (!response.ok) {
        console.error('HTTP Error:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          data,
          headers: [...response.headers.entries()].reduce((obj, [key, value]) => {
            obj[key] = value;
            return obj;
          }, {} as Record<string, string>),
        });

        if (response.status === 401) {
          // –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          if (IS_DEV_MODE) {
            const errorMessage = data && typeof data === 'object' ? 
              (data as any).message || '401 Unauthorized' : 
              '401 Unauthorized';
            console.warn('‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', errorMessage);
            
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            if (endpoint === '/profile') {
              return mockProfile() as unknown as T;
            } else if (endpoint === '/orders' || endpoint.startsWith('/orders?')) {
              return mockOrders() as unknown as T;
            } else if (endpoint.match(/\/orders\/[\w-]+$/)) {
              return mockOrderDetails() as unknown as T;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            return {} as unknown as T;
          }
          
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.');
        } else if (response.status === 404) {
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ API
          if (IS_DEV_MODE) {
            console.warn(`Dev mode: –∏–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${endpoint} –∏–∑-–∑–∞ 404 –æ—à–∏–±–∫–∏`);
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
            if (endpoint === '/orders' || endpoint.startsWith('/orders?')) {
              return mockOrders() as unknown as T;
            } else if (endpoint.match(/\/orders\/[\w-]+$/)) {
              return mockOrderDetails() as unknown as T;
            } else if (endpoint === '/profile') {
              return mockProfile() as unknown as T;
            }
          }
          
          throw new Error(`API –Ω–µ –Ω–∞–π–¥–µ–Ω: ${endpoint}`);
        } else {
          throw new Error(data.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
      }

      return data.data;
    } catch (error) {
      console.error('API Error:', error);
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      if (IS_DEV_MODE) {
        if (endpoint === '/profile') {
          console.warn('Dev mode: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å');
          return mockProfile() as unknown as T;
        } else if (endpoint === '/orders' || endpoint.startsWith('/orders?')) {
          console.warn('Dev mode: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
          return mockOrders() as unknown as T;
        } else if (endpoint.match(/\/orders\/[\w-]+$/)) {
          console.warn('Dev mode: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞');
          return mockOrderDetails() as unknown as T;
        }
      }
      throw error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  };
};

/** –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */
export interface CreateOrderDTO {
  /** –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
  fromAddress: string;
  /** –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è */
  toAddress: string;
  /** –¶–µ–Ω–∞ */
  price?: number;
  /** –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */
  comment?: string;
}

/** –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã */
export interface CreateOfferDTO {
  /** ID –∑–∞–∫–∞–∑–∞ */
  orderId: string;
  /** –¶–µ–Ω–∞ */
  price: number;
}

/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */
export interface UpdateOrderDTO {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */
  status?: OrderStatus;
  /** –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ */
  finalPrice?: number;
  /** ID –≤–æ–¥–∏—Ç–µ–ª—è */
  driverId?: string;
  /** –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ */
  startedAt?: string;
  /** –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ */
  completedAt?: string;
}

/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è */
export interface UpdateProfileDTO {
  /** –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  role: 'driver' | 'passenger';
}

const http = createHttp();

/** API –∫–ª–∏–µ–Ω—Ç */
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
function mockProfile() {
  return {
    id: 'test-user-id',
    username: 'test_user',
    telegramId: '123456789',
    role: 'passenger',
    rating: 5,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };
}

function mockOrders() {
  return [
    {
      id: 'order-1',
      fromAddress: '—É–ª. –ê–±–∞—è, 47',
      toAddress: '–¢–†–¶ –ú–µ–≥–∞',
      status: 'active',
      price: 2000,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      passengerId: 'test-user-id'
    },
    {
      id: 'order-2',
      fromAddress: '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
      toAddress: '–ê—ç—Ä–æ–ø–æ—Ä—Ç –ê–ª–º–∞—Ç—ã',
      status: 'active',
      price: 4500,
      createdAt: new Date(Date.now() - 30 * 60000).toISOString(),
      updatedAt: new Date(Date.now() - 30 * 60000).toISOString(),
      passengerId: 'test-user-id'
    }
  ];
}

function mockOrderDetails() {
  return {
    id: 'order-1',
    fromAddress: '—É–ª. –ê–±–∞—è, 47',
    toAddress: '–¢–†–¶ –ú–µ–≥–∞',
    status: 'active',
    price: 2000,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    passengerId: 'test-user-id',
    offers: [],
    messages: []
  };
}

export const api = {
  // –ü—Ä–æ—Ñ–∏–ª—å
  /** –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å */
  getProfile: () => http<Profile>('/profile'),
  /** –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å */
  updateProfile: (data: UpdateProfileDTO) =>
    http<Profile>('/profile', { method: 'PUT', body: data }),

  // –ó–∞–∫–∞–∑—ã
  /** –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */
  getOrders: (status?: OrderStatus) =>
    http<Order[]>(`/orders${status ? `?status=${status}` : ''}`),
  /** –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ */
  getOrder: (id: string) => http<Order>(`/orders/${id}`),
  /** –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ */
  createOrder: (data: CreateOrderDTO) =>
    http<Order>('/orders', { method: 'POST', body: data }),
  /** –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ */
  updateOrder: (id: string, data: UpdateOrderDTO) =>
    http<Order>(`/orders/${id}`, { method: 'PUT', body: data }),

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
  /** –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */
  getOffers: (orderId: string) =>
    http<PriceOffer[]>(`/orders/${orderId}/offers`),
  /** –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ */
  createOffer: (data: CreateOfferDTO) =>
    http<PriceOffer>('/offers', { method: 'POST', body: data }),
  /** –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ */
  updateOffer: (id: string, data: { status: 'accepted' | 'rejected' }) =>
    http<PriceOffer>(`/offers/${id}`, { method: 'PUT', body: data }),

  // –ß–∞—Ç
  /** –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */
  getMessages: (orderId: string) =>
    http<Message[]>(`/orders/${orderId}/messages`),
  /** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ */
  sendMessage: (orderId: string, text: string) =>
    http<Message>(`/orders/${orderId}/messages`, {
      method: 'POST',
      body: { text },
    }),
} as const;
